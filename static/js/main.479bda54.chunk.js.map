{"version":3,"sources":["components/MarkdownEditor.js","components/Navbar.js","sampleText.js","App.js","serviceWorker.js","index.js"],"names":["MarkdownEditor","props","className","style","resize","onChange","handleChange","value","text","autoFocus","dangerouslySetInnerHTML","renderText","Navbar","sampleText","App","state","localStorage","getItem","this","setState","setItem","event","target","__html","marked","sanitize","bind","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6RAiCeA,MA7Bf,SAAyBC,GACvB,OACE,yBAAKC,UAAU,mBACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,mBACb,kBAAC,IAAD,CACEC,MAAO,CAAEC,OAAQ,QACjBC,SAAUJ,EAAMK,aAChBJ,UAAU,eACVK,MAAON,EAAMO,KACbC,WAAS,KAGb,yBAAKP,UAAU,4BACb,yBACEQ,wBAAyBT,EAAMU,WAAWV,EAAMO,YCjB7C,SAASI,IACtB,OACE,yBAAKV,UAAU,qDACb,0BAAMA,UAAU,wBAAhB,kBCLC,IAAMW,EACX,6SCoDaC,E,kDA7Cb,WAAab,GAAQ,IAAD,8BAClB,cAAMA,IACDc,MAAQ,CACXP,KAAMK,GAHU,E,gEAQlB,IAAML,EAAOQ,aAAaC,QAAQ,QAC9BT,EACFU,KAAKC,SAAS,CAAEX,SAEhBU,KAAKC,SAAS,CAAEX,KAAMK,M,2CAIH,IACbL,EAASU,KAAKH,MAAdP,KACRQ,aAAaI,QAAQ,OAAQZ,K,mCAGjBa,GACZ,IAAMb,EAAOa,EAAMC,OAAOf,MAC1BW,KAAKC,SAAS,CAAEX,W,iCAGNA,GAEV,MAAO,CAAEe,OADMC,IAAOhB,EAAM,CAAEiB,UAAU,O,+BAKxC,OACE,oCACE,kBAACb,EAAD,MACA,kBAAC,EAAD,CACEN,aAAcY,KAAKZ,aAAaoB,KAAKR,MACrCP,WAAYO,KAAKP,WACjBH,KAAMU,KAAKH,MAAMP,Y,GAvCTmB,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.479bda54.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport TextareaAutosize from 'react-textarea-autosize'\n\nfunction MarkdownEditor (props) {\n  return (\n    <div className='container-fluid'>\n      <div className='row'>\n        <div className='col-sm-6 editor'>\n          <TextareaAutosize\n            style={{ resize: 'none' }}\n            onChange={props.handleChange}\n            className='form-control'\n            value={props.text}\n            autoFocus\n          />\n        </div>\n        <div className='col-sm-6 mr-auto preview'>\n          <div\n            dangerouslySetInnerHTML={props.renderText(props.text)}\n          ></div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nMarkdownEditor.propTypes = {\n  handleChange: PropTypes.func.isRequired,\n  renderText: PropTypes.func.isRequired,\n  text: PropTypes.string.isRequired\n}\n\nexport default MarkdownEditor\n","import React from 'react'\n\nexport default function Navbar () {\n  return (\n    <nav className=\"navbar navbar-dark bg-dark justify-content-center\">\n      <span className=\"navbar-brand mb-0 h1\">MarkdownShare</span>\n    </nav>\n  )\n}\n","export const sampleText =\n  '# Title\\n## Subtitle\\n\\n List:\\n  * item\\n  * item\\n  * item\\n\\nNumerated list:\\n  1. item\\n  2. item\\n  3. item\\n\\nSimple link\\n [MarkdownShare](https://leomoille.github.io/markdown-share-app/) \\n\\nLink : https://leomoille.github.io/markdown-share-app/\\n\\n```\\n console.log(\"hello world!\"); \\n``` '\n","import marked from 'marked'\nimport React, { Component } from 'react'\nimport './App.css'\nimport MarkdownEditor from './components/MarkdownEditor'\nimport Navbar from './components/Navbar'\nimport { sampleText } from './sampleText'\n\nclass App extends Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      text: sampleText\n    }\n  }\n\n  componentDidMount () {\n    const text = localStorage.getItem('text')\n    if (text) {\n      this.setState({ text })\n    } else {\n      this.setState({ text: sampleText })\n    }\n  }\n\n  componentDidUpdate () {\n    const { text } = this.state\n    localStorage.setItem('text', text)\n  }\n\n  handleChange (event) {\n    const text = event.target.value\n    this.setState({ text })\n  }\n\n  renderText (text) {\n    const __html = marked(text, { sanitize: true })\n    return { __html }\n  }\n\n  render () {\n    return (\n      <>\n        <Navbar />\n        <MarkdownEditor\n          handleChange={this.handleChange.bind(this)}\n          renderText={this.renderText}\n          text={this.state.text}\n        />\n      </>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}